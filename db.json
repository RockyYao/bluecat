{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/static/images/header.jpg","path":"static/images/header.jpg","modified":0,"renderable":0},{"_id":"themes/lite/source/static/favicon.ico","path":"static/favicon.ico","modified":0,"renderable":1},{"_id":"themes/lite/source/about/index.md","path":"about/index.md","modified":0,"renderable":1},{"_id":"themes/lite/source/static/css/app.c64eadfc8d3abfc9d85514dba4054813.css.gz","path":"static/css/app.c64eadfc8d3abfc9d85514dba4054813.css.gz","modified":0,"renderable":1},{"_id":"themes/lite/source/static/fonts/element-icons.6f0a763.ttf","path":"static/fonts/element-icons.6f0a763.ttf","modified":0,"renderable":1},{"_id":"themes/lite/source/static/images/kamuyi.jpg","path":"static/images/kamuyi.jpg","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/0.70dabc1c0009631e2a0e.js.gz","path":"static/js/0.70dabc1c0009631e2a0e.js.gz","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/1.bcea4c6d162aee194d2f.js.gz","path":"static/js/1.bcea4c6d162aee194d2f.js.gz","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/0.70dabc1c0009631e2a0e.js","path":"static/js/0.70dabc1c0009631e2a0e.js","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/3.deac70890ffb1825009b.js","path":"static/js/3.deac70890ffb1825009b.js","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/2.3cfdff1b7c1cae50046a.js.gz","path":"static/js/2.3cfdff1b7c1cae50046a.js.gz","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/3.deac70890ffb1825009b.js.map","path":"static/js/3.deac70890ffb1825009b.js.map","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/4.b530ea7d5ec4696df8e1.js.map","path":"static/js/4.b530ea7d5ec4696df8e1.js.map","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/4.b530ea7d5ec4696df8e1.js","path":"static/js/4.b530ea7d5ec4696df8e1.js","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/5.c7fc1283ec1fdfd0717e.js.map","path":"static/js/5.c7fc1283ec1fdfd0717e.js.map","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/5.c7fc1283ec1fdfd0717e.js","path":"static/js/5.c7fc1283ec1fdfd0717e.js","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/6.881c66edb9204f71bb5d.js","path":"static/js/6.881c66edb9204f71bb5d.js","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/6.881c66edb9204f71bb5d.js.map","path":"static/js/6.881c66edb9204f71bb5d.js.map","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/app.bc036f9167871d39aecf.js.gz","path":"static/js/app.bc036f9167871d39aecf.js.gz","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/7.cae543e622eab56f781f.js","path":"static/js/7.cae543e622eab56f781f.js","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/7.cae543e622eab56f781f.js.map","path":"static/js/7.cae543e622eab56f781f.js.map","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/manifest.992b63bf2abbf3194771.js.map","path":"static/js/manifest.992b63bf2abbf3194771.js.map","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/manifest.992b63bf2abbf3194771.js","path":"static/js/manifest.992b63bf2abbf3194771.js","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/app.bc036f9167871d39aecf.js","path":"static/js/app.bc036f9167871d39aecf.js","modified":0,"renderable":1},{"_id":"themes/lite/source/static/fonts/fontawesome-webfont.af7ae50.woff2","path":"static/fonts/fontawesome-webfont.af7ae50.woff2","modified":0,"renderable":1},{"_id":"themes/lite/source/static/fonts/fontawesome-webfont.fee66e7.woff","path":"static/fonts/fontawesome-webfont.fee66e7.woff","modified":0,"renderable":1},{"_id":"themes/lite/source/static/fonts/proximanova.943bfb3.eot","path":"static/fonts/proximanova.943bfb3.eot","modified":0,"renderable":1},{"_id":"themes/lite/source/static/fonts/proximanova.3d5b0ad.woff","path":"static/fonts/proximanova.3d5b0ad.woff","modified":0,"renderable":1},{"_id":"themes/lite/source/static/images/header3.png","path":"static/images/header3.png","modified":0,"renderable":1},{"_id":"themes/lite/source/static/images/miku.jpg","path":"static/images/miku.jpg","modified":0,"renderable":1},{"_id":"themes/lite/source/static/fonts/proximanova.e82905b.ttf","path":"static/fonts/proximanova.e82905b.ttf","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/0.70dabc1c0009631e2a0e.js.map","path":"static/js/0.70dabc1c0009631e2a0e.js.map","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/app.bc036f9167871d39aecf.js.map","path":"static/js/app.bc036f9167871d39aecf.js.map","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/vendor.e12dc8c9af1f7aa12436.js.gz","path":"static/js/vendor.e12dc8c9af1f7aa12436.js.gz","modified":0,"renderable":1},{"_id":"themes/lite/source/static/fonts/FiraCode-Regular.32d1e9f.eot","path":"static/fonts/FiraCode-Regular.32d1e9f.eot","modified":0,"renderable":1},{"_id":"themes/lite/source/static/fonts/FiraCode-Regular.cb83346.ttf","path":"static/fonts/FiraCode-Regular.cb83346.ttf","modified":0,"renderable":1},{"_id":"themes/lite/source/static/fonts/FiraCode-Regular.2fe2d29.woff","path":"static/fonts/FiraCode-Regular.2fe2d29.woff","modified":0,"renderable":1},{"_id":"themes/lite/source/static/fonts/fontawesome-webfont.674f50d.eot","path":"static/fonts/fontawesome-webfont.674f50d.eot","modified":0,"renderable":1},{"_id":"themes/lite/source/static/fonts/fontawesome-webfont.b06871f.ttf","path":"static/fonts/fontawesome-webfont.b06871f.ttf","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/1.bcea4c6d162aee194d2f.js","path":"static/js/1.bcea4c6d162aee194d2f.js","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/2.3cfdff1b7c1cae50046a.js","path":"static/js/2.3cfdff1b7c1cae50046a.js","modified":0,"renderable":1},{"_id":"themes/lite/source/static/css/app.c64eadfc8d3abfc9d85514dba4054813.css","path":"static/css/app.c64eadfc8d3abfc9d85514dba4054813.css","modified":0,"renderable":1},{"_id":"themes/lite/source/static/img/FiraCode-Regular.7894876.svg","path":"static/img/FiraCode-Regular.7894876.svg","modified":0,"renderable":1},{"_id":"themes/lite/source/static/img/proximanova.80c0947.svg","path":"static/img/proximanova.80c0947.svg","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/1.bcea4c6d162aee194d2f.js.map","path":"static/js/1.bcea4c6d162aee194d2f.js.map","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/2.3cfdff1b7c1cae50046a.js.map","path":"static/js/2.3cfdff1b7c1cae50046a.js.map","modified":0,"renderable":1},{"_id":"themes/lite/source/static/img/fontawesome-webfont.912ec66.svg","path":"static/img/fontawesome-webfont.912ec66.svg","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/vendor.e12dc8c9af1f7aa12436.js","path":"static/js/vendor.e12dc8c9af1f7aa12436.js","modified":0,"renderable":1},{"_id":"themes/lite/source/static/css/app.c64eadfc8d3abfc9d85514dba4054813.css.map","path":"static/css/app.c64eadfc8d3abfc9d85514dba4054813.css.map","modified":0,"renderable":1},{"_id":"themes/lite/source/static/js/vendor.e12dc8c9af1f7aa12436.js.map","path":"static/js/vendor.e12dc8c9af1f7aa12436.js.map","modified":0,"renderable":1},{"_id":"source/static/images/show-love.jpg","path":"static/images/show-love.jpg","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0}],"Cache":[{"_id":"themes/lite/.gitignore","hash":"42aa3dbd9c13ecd4f41f2386d2e0e6e2619f58e9","modified":1537319569485},{"_id":"themes/lite/.babelrc","hash":"6ba786c53d7a836892541558746a7802f60e8db8","modified":1537319569482},{"_id":"themes/lite/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1537319569483},{"_id":"themes/lite/_config.yml","hash":"ee8972b677af5a23512cbd3d21efabf47ae78168","modified":1537324892076},{"_id":"themes/lite/.postcssrc.js","hash":"3d66cd47a381a4505aa88133eb451831f3681c9c","modified":1537319569486},{"_id":"themes/lite/LICENSE","hash":"97457247620b5e5db0c6ea7112a5d52501506c6f","modified":1537319569488},{"_id":"themes/lite/README.md","hash":"46f09dc068de55aead3c90de56bb22ffe0ac26c0","modified":1537319569490},{"_id":"themes/lite/tsconfig.json","hash":"de21708950959854a1e213c16526f7ebb67e7b52","modified":1537319569911},{"_id":"themes/lite/package.json","hash":"6b64c317bcc556f31b2cb9dbc87754eb18bdb62d","modified":1537319569540},{"_id":"themes/lite/tslint.json","hash":"5c7e8cf6dd286ca993456033012e50f04185d90d","modified":1537319569913},{"_id":"themes/lite/index.html","hash":"dddd8ad428184c87247e7f68c82c399e376435a4","modified":1537319569536},{"_id":"themes/lite/static/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537319569902},{"_id":"source/_posts/Christmas.md","hash":"6d10492f81037f3baf241bbdf951373672c1b1a2","modified":1537327491843},{"_id":"themes/lite/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537319569423},{"_id":"source/_posts/hexo.md","hash":"dde45ab4968659af5b5fbad336b7cbf128f0f987","modified":1537326570366},{"_id":"themes/lite/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537319485044},{"_id":"themes/lite/.git/packed-refs","hash":"24d8b8b0931c888be2dbc5f40f1cd2ead02affc4","modified":1537319569399},{"_id":"source/_posts/demo.md","hash":"cc508572e2e07cb68e4e7e75e07c5d6e5130b3c1","modified":1537318559107},{"_id":"themes/lite/.git/config","hash":"a526c2feee888e039197637071cfc2f92749c082","modified":1537319569450},{"_id":"themes/lite/build/logo.png","hash":"1a6ace377133f14a2b2cd7c48f10369a6bc54b2e","modified":1537319569499},{"_id":"themes/lite/build/build.js","hash":"c64b9ece446249afd3b1b223f80073406be8b0f9","modified":1537319569495},{"_id":"themes/lite/build/webpack.base.conf.js","hash":"cc457fca55e85859e833a46c23228151a45c5b8f","modified":1537319569504},{"_id":"themes/lite/.git/index","hash":"b81206d9dfb256fcdef02ca5d58c8e0f30195537","modified":1537319569917},{"_id":"themes/lite/build/webpack.prod.conf.js","hash":"095392a8341f43e7c53e5935686673a85bfba8dd","modified":1537319569509},{"_id":"themes/lite/build/check-versions.js","hash":"93b45409086ec86c3cad67d8ebc9746378ced54f","modified":1537319569497},{"_id":"themes/lite/build/utils.js","hash":"6abe16db498c9ac0b6d2a661d32858b67fd7ec88","modified":1537319569501},{"_id":"themes/lite/build/vue-loader.conf.js","hash":"1c53147dec671a48547d9bb166b3437b05fdc6c2","modified":1537319569503},{"_id":"themes/lite/config/dev.env.js","hash":"305aa4b842355411331be5f2771924d451d7d667","modified":1537319569512},{"_id":"themes/lite/config/prod.env.js","hash":"4e6d473ad63bc5f892ce8a8bd9126c2f47e8fd12","modified":1537319569515},{"_id":"themes/lite/build/webpack.dev.conf.js","hash":"15976695f45b389f9ab37c9001564c5b1f7aeb41","modified":1537319569507},{"_id":"themes/lite/docs/depre.png","hash":"d7fbeef7f511d249ea60696c085955790de78b31","modified":1537319569517},{"_id":"themes/lite/docs/ico.png","hash":"b3307edbf1d9004dc76c7f76000a5bfb7f483248","modified":1537319569522},{"_id":"themes/lite/scripts/generate-api.js","hash":"9d06a47c439fc94cb7e11a38a05ab73f1e5fec6f","modified":1537319569543},{"_id":"themes/lite/config/index.js","hash":"6a422ca26f3afef4b4664ce28d44236f835e8e58","modified":1537319569514},{"_id":"themes/lite/docs/registerOAuth.png","hash":"dcecfd1f1bc54223b1655b09c3390252733a1e8b","modified":1537319569533},{"_id":"themes/lite/docs/replace.png","hash":"86781c66b7a433512e272ae749987a5cc1d12cd5","modified":1537319569535},{"_id":"themes/lite/src/main.ts","hash":"00675f46b32f4bb7308cc305e8fea4fa3b945d8a","modified":1537319569772},{"_id":"themes/lite/src/vue-analytics.d.ts","hash":"6cfc36014ad7bad83b2f5e98ce8795ab1e36580d","modified":1537319569888},{"_id":"themes/lite/static/favicon.ico","hash":"ff919e9f723d2743a480a2620fb89f3fd03028a6","modified":1537319569905},{"_id":"themes/lite/src/entry-client.ts","hash":"3d5117682af361187e4a65349f3f2605371b3ca1","modified":1537319569765},{"_id":"themes/lite/src/vue-shims.d.ts","hash":"4ec04dbebde74276ce6dd988447dc1e67a2cb9f2","modified":1537319569900},{"_id":"themes/lite/layout/index.ejs","hash":"c4bbdf09b0e1f2e55b627d09a922c33177b1280a","modified":1537319569538},{"_id":"themes/lite/docs/linear3.png","hash":"df9358dd573889197ae5fc6aef76fe155bc73eae","modified":1537319569525},{"_id":"themes/lite/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537319485052},{"_id":"themes/lite/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537319485049},{"_id":"source/static/images/header.jpg","hash":"d5c9e0407d11224d45a5cc59c60564cd32c9d4c3","modified":1537321032800},{"_id":"themes/lite/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537319485069},{"_id":"themes/lite/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537319485065},{"_id":"themes/lite/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537319485085},{"_id":"themes/lite/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1537319485055},{"_id":"themes/lite/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537319485057},{"_id":"themes/lite/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537319485090},{"_id":"themes/lite/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537319485072},{"_id":"themes/lite/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1537319485082},{"_id":"themes/lite/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1537319485088},{"_id":"themes/lite/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537319485098},{"_id":"themes/lite/.git/logs/HEAD","hash":"2ff494ddce19de33c41783d166d626e0609ca7f6","modified":1537319569434},{"_id":"themes/lite/source/static/favicon.ico","hash":"ff919e9f723d2743a480a2620fb89f3fd03028a6","modified":1537319569565},{"_id":"themes/lite/src/assets/logo.png","hash":"1a6ace377133f14a2b2cd7c48f10369a6bc54b2e","modified":1537319569763},{"_id":"themes/lite/source/about/index.md","hash":"d507294c290c585507a258cc63283a73aef64705","modified":1536225645289},{"_id":"themes/lite/src/layout/AppLayout.vue","hash":"88eb0efab301c393f304ca9977b3d900079f61c6","modified":1537319569769},{"_id":"themes/lite/src/interfaces/fetch.interface.ts","hash":"ed898f0567d4bc8394599a079702c8e2e92d7573","modified":1537319569767},{"_id":"themes/lite/src/api/index.ts","hash":"9b4caba619969dde86bfd8c6b4ea4083ec68c05d","modified":1537319569736},{"_id":"themes/lite/src/models/comments-system.class.ts","hash":"c1745cc084b451d61711caf32e5b01e2cd14b550","modified":1537319569776},{"_id":"themes/lite/src/layout/app-layout.component.ts","hash":"1fecfe7c8f03b976005273f1d68c96741cbc65f4","modified":1537319569770},{"_id":"themes/lite/src/models/article.class.ts","hash":"b138d13b378f24366369eaba5e4b8d90454d1990","modified":1537319569775},{"_id":"themes/lite/src/models/modal.class.ts","hash":"38b753399f7c586f70f9f8cff935eb53dc4abea0","modified":1537319569780},{"_id":"themes/lite/src/models/posts-list.class.ts","hash":"babda6597f3da0b279097d58673154dd4d50dbbe","modified":1537319569783},{"_id":"themes/lite/src/router/index.ts","hash":"90e92e2612a667f6ff986ec10ee3960787d3f9a6","modified":1537319569786},{"_id":"themes/lite/src/models/hexo-config.class.ts","hash":"1d3b168df9abb9dce6665895be22946b1abd377e","modified":1537319569778},{"_id":"themes/lite/src/styles/global.scss","hash":"a9a0c6be1084a0ae001b1e307e747e037d6ecce8","modified":1537319569809},{"_id":"themes/lite/src/store/index.ts","hash":"e14b804ffa24e4e8dc0bf28023ba6bb72c9e6008","modified":1537319569788},{"_id":"themes/lite/src/store/types.ts","hash":"9457edc5d55e6f642162d329b55951769220b786","modified":1537319569805},{"_id":"themes/lite/src/styles/nprogress.scss","hash":"4bf09ca43e0363646fa5859ad3e9f1943b056f3f","modified":1537319569813},{"_id":"themes/lite/src/models/theme-config.class.ts","hash":"29cf8abde3baf1d0be9663041f62ff495af46f76","modified":1537319569784},{"_id":"themes/lite/src/styles/vars.scss","hash":"1d330b9275ed1f8e104684792e7347eab5e6f31c","modified":1537319569815},{"_id":"themes/lite/src/styles/helpers.scss","hash":"7fd9d6ae0237388eaab410bb3fb9146ccca3f901","modified":1537319569810},{"_id":"themes/lite/src/styles/import-style.ts","hash":"9d11d67d75042dfe8096616918766976d1ff4b18","modified":1537319569811},{"_id":"themes/lite/src/vue-install/lite-analytics.ts","hash":"6d9d7b3df5f29d7434a32a40715485c589f17e30","modified":1537319569891},{"_id":"themes/lite/src/styles/element-ui-vars.scss","hash":"fac6d4d7b037b71307d63fe78fd8e2510fe2572c","modified":1537319569807},{"_id":"themes/lite/src/vue-install/lite-register-vue-class-component-hook.ts","hash":"62c939598608d56f93bf5692d1ae8785da5c55fb","modified":1537319569899},{"_id":"themes/lite/src/vue-install/lite-nprogress.ts","hash":"bad779506ebdef035adc6dd74067ff2b8b65ae5e","modified":1537319569897},{"_id":"themes/lite/src/vue-install/lite-moment-format.ts","hash":"545b7c28c686d17f6e7fce14a22cfe00f51996f6","modified":1537319569895},{"_id":"themes/lite/src/vue-install/lite-element-ui.ts","hash":"9b53b973e839905f3db33ea7f2a2463679159f83","modified":1537319569893},{"_id":"themes/lite/static/images/kamuyi.jpg","hash":"e8c125df47e67de6884b92a73b2e98f7cc0320bd","modified":1537319569908},{"_id":"themes/lite/static/images/header.jpg","hash":"d5c9e0407d11224d45a5cc59c60564cd32c9d4c3","modified":1537321032800},{"_id":"themes/lite/yarn.lock","hash":"062f22d9d103290b6daaf771462ac23264a4d333","modified":1537319569915},{"_id":"themes/lite/docs/gr.png","hash":"45c8bccbacfe0a3f6892bb1f1c73c7865f279dcd","modified":1537319569520},{"_id":"themes/lite/static/images/header3.png","hash":"2be0081309f0c169b31c171045cd9cd8ebb7cd6b","modified":1537324273227},{"_id":"themes/lite/.git/refs/heads/master","hash":"60bdc48b1830bff1db33ef25028d5ce27b8ae46b","modified":1537319569433},{"_id":"themes/lite/.git/objects/pack/pack-36d1904db2e9788dc7df8f12d8af2fe911c51b95.idx","hash":"f1052ae637c9e72d750d66709cc67aa9e8b8c8df","modified":1537319569313},{"_id":"themes/lite/source/static/css/app.c64eadfc8d3abfc9d85514dba4054813.css.gz","hash":"029781428d6998788591fdbd6bea57dbe9880b80","modified":1537319569552},{"_id":"themes/lite/source/static/fonts/element-icons.6f0a763.ttf","hash":"edbe23fdf12089f825f3bdf4a3a8608b157a8040","modified":1537319569581},{"_id":"themes/lite/source/static/images/kamuyi.jpg","hash":"e8c125df47e67de6884b92a73b2e98f7cc0320bd","modified":1537319569609},{"_id":"themes/lite/src/assets/fonts/FiraCode-Regular.css","hash":"de4f3f83c3dd15c975025328e037f03b5aebbe34","modified":1537319569739},{"_id":"themes/lite/src/assets/fonts/proximanova.css","hash":"23af1d754eebe8cffd91fa917d0b3a41d1125584","modified":1537319569752},{"_id":"themes/lite/static/images/header2.jpg","hash":"64bfdd57539dc66111492ba797e9f1bdcdcc55ec","modified":1536571096352},{"_id":"themes/lite/source/static/js/0.70dabc1c0009631e2a0e.js.gz","hash":"bfe9382a928be1dc471b0fd9e5f719df4af12552","modified":1537319569636},{"_id":"themes/lite/source/static/js/1.bcea4c6d162aee194d2f.js.gz","hash":"a52549056aad8a3e97595fe8721eff6dfee9f3ad","modified":1537319569645},{"_id":"themes/lite/source/static/js/0.70dabc1c0009631e2a0e.js","hash":"eea39fd6af2470a60cb02cbecfa25c4761765aea","modified":1537319569631},{"_id":"themes/lite/source/static/js/3.deac70890ffb1825009b.js","hash":"d99bfce8536b8229391c944eefb76c32a4c28ce6","modified":1537319569665},{"_id":"themes/lite/source/static/js/2.3cfdff1b7c1cae50046a.js.gz","hash":"433923f00a11102dc172e41a7407ba5c0c7de338","modified":1537319569654},{"_id":"themes/lite/source/static/js/3.deac70890ffb1825009b.js.map","hash":"1c075c9adc857bb3621642eb97f3c841953d3d45","modified":1537319569668},{"_id":"themes/lite/source/static/js/4.b530ea7d5ec4696df8e1.js.map","hash":"0b1aab1950f1309e82106b215f6ca47db0802959","modified":1537319569674},{"_id":"themes/lite/source/static/js/4.b530ea7d5ec4696df8e1.js","hash":"250aca7e4a140d4820423464326b31c37ad61463","modified":1537319569671},{"_id":"themes/lite/source/static/js/5.c7fc1283ec1fdfd0717e.js.map","hash":"cc89e44a9e2175a88beee9bac1f56746e58e883e","modified":1537319569680},{"_id":"themes/lite/source/static/js/5.c7fc1283ec1fdfd0717e.js","hash":"7c78b5ff288431f7dd1252f1b13b04024e5d7c93","modified":1537319569677},{"_id":"themes/lite/source/static/js/6.881c66edb9204f71bb5d.js","hash":"c7c0d3fc8c382a4367109c6472cb7ef6db69ab2c","modified":1537319569682},{"_id":"themes/lite/source/static/js/6.881c66edb9204f71bb5d.js.map","hash":"5532d689a570f99535eef1e0d8b2cb87d927a03f","modified":1537319569684},{"_id":"themes/lite/source/static/js/app.bc036f9167871d39aecf.js.gz","hash":"c047d994ddc97d4ca845f3dca3605acf142db313","modified":1537319569694},{"_id":"themes/lite/source/static/js/7.cae543e622eab56f781f.js","hash":"0383ffefeb2d256958bd0bbf0883f729336d35c2","modified":1537319569686},{"_id":"themes/lite/source/static/js/7.cae543e622eab56f781f.js.map","hash":"7b99a41ba43770ae45917761659c503f34f7e704","modified":1537319569688},{"_id":"themes/lite/source/static/js/manifest.992b63bf2abbf3194771.js.map","hash":"c4f78a8cd0a9cb446f12436109b4fba87e7b5fd4","modified":1537319569703},{"_id":"themes/lite/source/static/js/manifest.992b63bf2abbf3194771.js","hash":"ce22cd3ea5585a6368cdf07c000a2604d43e63ff","modified":1537319569701},{"_id":"themes/lite/source/static/js/app.bc036f9167871d39aecf.js","hash":"9f491ab79691be5327f5b5105ca9d305513d618f","modified":1537319569692},{"_id":"themes/lite/src/store/modules/archives.module.ts","hash":"9d44980d9534608f5e589b14689d15710c79a860","modified":1537319569792},{"_id":"themes/lite/src/store/modules/categories.module.ts","hash":"f577d8c1b8ad130bf32f4ddc9d838fa20ebe7aa3","modified":1537319569794},{"_id":"themes/lite/static/images/miku.jpg","hash":"3af91ab89e6f1a5e27022fcb7160422db27c4d60","modified":1537319569910},{"_id":"themes/lite/src/store/modules/detailable.module.ts","hash":"32d86cf853d2ee83e682c3e2670ec98f49067406","modified":1537319569797},{"_id":"themes/lite/src/store/modules/global.ts","hash":"5f4c654ee01752defa6162bf4fd4cfd5a9e1a312","modified":1537319569799},{"_id":"themes/lite/src/store/modules/home.module.ts","hash":"4dd27d2231df3036d70c625b2797d881286432f8","modified":1537319569801},{"_id":"themes/lite/source/static/fonts/fontawesome-webfont.af7ae50.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1537319569586},{"_id":"themes/lite/source/static/fonts/fontawesome-webfont.fee66e7.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1537319569595},{"_id":"themes/lite/source/static/fonts/proximanova.943bfb3.eot","hash":"bdf32a8ede164ee651534c7e4cf49ccf72aaefa4","modified":1537319569602},{"_id":"themes/lite/source/static/fonts/proximanova.3d5b0ad.woff","hash":"ca4e06c0ce669edd62ef0958e4cf9a9b8eddbce2","modified":1537319569600},{"_id":"themes/lite/source/static/images/header3.png","hash":"2be0081309f0c169b31c171045cd9cd8ebb7cd6b","modified":1537324273227},{"_id":"themes/lite/source/static/images/miku.jpg","hash":"3af91ab89e6f1a5e27022fcb7160422db27c4d60","modified":1537319569612},{"_id":"themes/lite/source/static/fonts/proximanova.e82905b.ttf","hash":"5b5ac92e49b03606da75dcffcb146b9efa40443b","modified":1537319569604},{"_id":"themes/lite/src/store/modules/tag.module.ts","hash":"94efe7e040a931c47e2dd8f4359773d0f3841f53","modified":1537319569803},{"_id":"themes/lite/src/assets/fonts/proximanova.ttf","hash":"5b5ac92e49b03606da75dcffcb146b9efa40443b","modified":1537319569758},{"_id":"themes/lite/src/assets/fonts/proximanova.eot","hash":"bdf32a8ede164ee651534c7e4cf49ccf72aaefa4","modified":1537319569753},{"_id":"themes/lite/src/assets/fonts/proximanova.woff","hash":"ca4e06c0ce669edd62ef0958e4cf9a9b8eddbce2","modified":1537319569760},{"_id":"themes/lite/source/static/js/0.70dabc1c0009631e2a0e.js.map","hash":"80e586a8a861f53257672dfab118bb20e4baf899","modified":1537319569638},{"_id":"themes/lite/source/static/js/app.bc036f9167871d39aecf.js.map","hash":"856054d2f184fa6ae6882aa6ef82324e52efb1c0","modified":1537319569699},{"_id":"themes/lite/source/static/js/vendor.e12dc8c9af1f7aa12436.js.gz","hash":"a8584b844089579c24ae352011d9f021b088e14a","modified":1537319569711},{"_id":"themes/lite/.git/logs/refs/heads/master","hash":"2ff494ddce19de33c41783d166d626e0609ca7f6","modified":1537319569438},{"_id":"themes/lite/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537319569418},{"_id":"themes/lite/source/static/fonts/FiraCode-Regular.32d1e9f.eot","hash":"d5e552f9eda28141432918f44fc8843336904f51","modified":1537319569572},{"_id":"themes/lite/source/static/fonts/FiraCode-Regular.cb83346.ttf","hash":"33dfa3929eaded02306d924ad20b3505f1ba4b6a","modified":1537319569577},{"_id":"themes/lite/source/static/fonts/FiraCode-Regular.2fe2d29.woff","hash":"8dd525737598128b28bff2d828d256c936649c40","modified":1537319569569},{"_id":"themes/lite/source/static/fonts/fontawesome-webfont.674f50d.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1537319569584},{"_id":"themes/lite/source/static/fonts/fontawesome-webfont.b06871f.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1537319569592},{"_id":"themes/lite/src/assets/fonts/FiraCode-Regular.eot","hash":"d5e552f9eda28141432918f44fc8843336904f51","modified":1537319569742},{"_id":"themes/lite/src/assets/fonts/FiraCode-Regular.ttf","hash":"33dfa3929eaded02306d924ad20b3505f1ba4b6a","modified":1537319569747},{"_id":"themes/lite/src/assets/fonts/FiraCode-Regular.woff","hash":"8dd525737598128b28bff2d828d256c936649c40","modified":1537319569750},{"_id":"themes/lite/source/static/js/1.bcea4c6d162aee194d2f.js","hash":"0343bf587aa3418ab35967a177c4b362bbe18848","modified":1537319569643},{"_id":"themes/lite/source/static/js/2.3cfdff1b7c1cae50046a.js","hash":"e544d094409a9fec4ab9e84ad7c69eac4334c831","modified":1537319569652},{"_id":"themes/lite/src/views/components/404/NotFound.vue","hash":"903f89f7fa6d8968c0bfb9d4d3a4a27c4906c037","modified":1537319569819},{"_id":"themes/lite/src/views/components/blur-div/blur-div.component.ts","hash":"0cccee0335ef09f959a604977192f14b8b3ad862","modified":1537319569827},{"_id":"themes/lite/src/views/components/article-card/ArticleCard.vue","hash":"306210b345ca26d398d986ef608432fe1751ba5c","modified":1537319569821},{"_id":"themes/lite/src/views/components/article-card/article-card.component.ts","hash":"141c84dbfb54ff605c860124fb92975306962d69","modified":1537319569823},{"_id":"themes/lite/src/views/components/bottom-footer/bottom-footer.component.ts","hash":"90effba5a4a0031c76480ebdc181c1bb447c8ca3","modified":1537319569833},{"_id":"themes/lite/src/views/components/bottom-footer/BottomFooter.vue","hash":"35e6991a812006f402ad1a5e5bbc3c5014407e20","modified":1537319569831},{"_id":"themes/lite/src/views/components/detailable-content/detailable-content.component.ts","hash":"bd349b2159aa6bf7affa6bd4f00e39f99ee6504d","modified":1537319569838},{"_id":"themes/lite/src/views/components/detailable-content/base-article-style.scss","hash":"3f631239b8181342caa72951844b4dcd6494fd86","modified":1537319569836},{"_id":"themes/lite/src/views/components/detailable-content/DetailableContent.vue","hash":"49d8bcb82070ccbcd4199ebd21a9862ebf3d229d","modified":1537319569835},{"_id":"themes/lite/src/views/components/detailable-page/DetailablePage.vue","hash":"5f84b0812e94a057088a300dc787773fd523f896","modified":1537319569842},{"_id":"themes/lite/src/views/components/detailable-content/figure-code-style.scss","hash":"1aa2ed57be8bf4a8ffe04d364c6ddefdffb30530","modified":1537319569839},{"_id":"themes/lite/src/views/components/eof/eof.component.ts","hash":"d67bf35f44c6d86ec5341bcab0a176f052629097","modified":1537319569848},{"_id":"themes/lite/src/views/components/detailable-page/detailable-page.component.ts","hash":"69f2dd054b94d4278fdf688b06ff88fea0400310","modified":1537319569844},{"_id":"themes/lite/src/views/components/eof/EndOfFile.vue","hash":"8f17dfca40fad0cc06f5dc8b082aa87359e0e4ec","modified":1537319569847},{"_id":"themes/lite/src/views/components/gitment-comment/GitmentComment.vue","hash":"a0272613f5ee5729ed5a6ac7f70a7132273610e1","modified":1537319569850},{"_id":"themes/lite/src/views/components/gitment-comment/gitment.d.ts","hash":"4483a5e8b5fcaa99e8d0e685bdbbac372256c45e","modified":1537319569854},{"_id":"themes/lite/src/views/components/gitment-comment/gitment-comment.component.ts","hash":"86328b145033836d87eb85ab6a5551da00d86443","modified":1537319569852},{"_id":"themes/lite/src/views/components/top-header/top-header.component.ts","hash":"7fc4d87c89219244ce169eb28986b38debb16687","modified":1537319569858},{"_id":"themes/lite/src/views/pages/404/page-404.page.ts","hash":"8ccac47e291d7512ca6c680b56ec295a681145c9","modified":1537319569867},{"_id":"themes/lite/src/views/pages/categories/CategoriesPage.vue","hash":"8b9c483ee51b61044d72cbf07f505d52e1654881","modified":1537319569873},{"_id":"themes/lite/src/views/components/top-header/TopHeader.vue","hash":"599572e17f17c483f3884fab565ac01c1f207e31","modified":1537319569856},{"_id":"themes/lite/src/views/pages/archives/ArchivesPage.vue","hash":"42ae0e346008d5e44d8fdd2e4bf6384637e2bb8b","modified":1537319569868},{"_id":"themes/lite/src/views/components/top-nav/top-nav.component.ts","hash":"ec562e4a738cb88d155e5147139a0c53ecb2dbe8","modified":1537319569864},{"_id":"themes/lite/src/views/components/top-nav/TopNav.vue","hash":"549b360035b0146f0b095309dcea5af7f6d89ce2","modified":1537319569862},{"_id":"themes/lite/src/views/pages/related-posts/RelatedPosts.vue","hash":"b509477cf76044b89bcfe7090eeeabb366002ab5","modified":1537319569882},{"_id":"themes/lite/src/views/pages/archives/archives.page.ts","hash":"41154698fecc3d35d427dbc778b01961e522dea3","modified":1537319569870},{"_id":"themes/lite/src/views/pages/detailable/create-detailable.ts","hash":"84b9e5138cdb924903286304c13b7edc6ca43335","modified":1537319569876},{"_id":"themes/lite/src/views/pages/related-posts/related-posts.component.ts","hash":"3bae1080cad1b761215cb9f4be4608e7b14d2a92","modified":1537319569883},{"_id":"themes/lite/src/views/pages/home/home.page.ts","hash":"d4a2aca90c138233ff55c2840139e3804f9da191","modified":1537319569880},{"_id":"themes/lite/src/views/pages/categories/categories.page.ts","hash":"7dee1ceb7c665f4dad53f9c8b55cee7bce8fdaab","modified":1537319569874},{"_id":"themes/lite/source/static/css/app.c64eadfc8d3abfc9d85514dba4054813.css","hash":"92f4300616bdb01343879cb4e16f97e8a4c5ef07","modified":1537319569550},{"_id":"themes/lite/src/assets/fonts/FiraCode-Regular.svg","hash":"c0a829b67051c8eb2bcae6e5357203c666d22707","modified":1537319569745},{"_id":"themes/lite/src/assets/fonts/proximanova.svg","hash":"fa494a50376e7ac50c839729fde2822453182f37","modified":1537319569756},{"_id":"themes/lite/source/static/img/FiraCode-Regular.7894876.svg","hash":"c0a829b67051c8eb2bcae6e5357203c666d22707","modified":1537319569617},{"_id":"themes/lite/source/static/img/proximanova.80c0947.svg","hash":"fa494a50376e7ac50c839729fde2822453182f37","modified":1537319569627},{"_id":"themes/lite/src/views/pages/home/HomePage.vue","hash":"331b1061119a6728df7435b85a5188bfed309a40","modified":1537319569878},{"_id":"themes/lite/src/views/pages/tags/TagsPage.vue","hash":"26af68f6797c88d5b68e41fc8b0976816aa4406a","modified":1537319569885},{"_id":"themes/lite/src/views/pages/tags/tags.page.ts","hash":"160ce68f4b375139ab81b02e587681cf68e9ee37","modified":1537319569887},{"_id":"themes/lite/.git/logs/refs/remotes/origin/HEAD","hash":"2ff494ddce19de33c41783d166d626e0609ca7f6","modified":1537319569417},{"_id":"themes/lite/source/static/js/1.bcea4c6d162aee194d2f.js.map","hash":"491886d1c711a6cabf5962957f76f9d97beb4f23","modified":1537319569650},{"_id":"themes/lite/source/static/js/2.3cfdff1b7c1cae50046a.js.map","hash":"8a4d27e07563a017da3e49fa3ae79c3c171101b2","modified":1537319569661},{"_id":"themes/lite/docs/preview2.jpg","hash":"2930292699fda4c5573b7541ed8b3f2bf63c6270","modified":1537319569531},{"_id":"themes/lite/source/static/img/fontawesome-webfont.912ec66.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1537319569621},{"_id":"themes/lite/source/static/js/vendor.e12dc8c9af1f7aa12436.js","hash":"bb17baf5ae3b98ac0c9fcea97f2ea400c3a556d9","modified":1537319569709},{"_id":"themes/lite/source/static/css/app.c64eadfc8d3abfc9d85514dba4054813.css.map","hash":"5b18fc4e9fea187e0b92eeec04db44489d3021af","modified":1537319569560},{"_id":"themes/lite/source/static/js/vendor.e12dc8c9af1f7aa12436.js.map","hash":"aea0e69597884701ed3d3ce28d800a19e767934a","modified":1537319569730},{"_id":"source/static/images/show-love.jpg","hash":"35e0abef60786a74e284700a6706055a94061a70","modified":1537327049342},{"_id":"themes/lite/.git/objects/pack/pack-36d1904db2e9788dc7df8f12d8af2fe911c51b95.pack","hash":"9a5d8915f53088a5f95af6b414013b4961c43e46","modified":1537319569317},{"_id":"source/_posts/Christmas(1).md","hash":"6d10492f81037f3baf241bbdf951373672c1b1a2","modified":1537327491843},{"_id":"public/atom.xml","hash":"1f2450e83e5aa679e7ba828322681ea6828a867c","modified":1537331963080},{"_id":"public/api/site.json","hash":"5ff80da84a7d13cd4a281b633dcb76bbf4345bfc","modified":1537332603272},{"_id":"public/api/posts.json","hash":"39ebb7d775fdf70ed875b13edf0c7276eb340a5a","modified":1537331963082},{"_id":"public/api/tags.json","hash":"2afa8c5c31aad2673407d9043b32223c927b4b01","modified":1537331963082},{"_id":"public/api/posts/1.json","hash":"39ebb7d775fdf70ed875b13edf0c7276eb340a5a","modified":1537331963082},{"_id":"public/api/tags/css.json","hash":"118e0d3f006d8d97444dcfae3815643bd59a3a21","modified":1537328416754},{"_id":"public/api/articles/demo.json","hash":"5daf44d0078662ccf4d34b780dc1be01149bd630","modified":1537328416754},{"_id":"public/2015/10/21/demo/index.html","hash":"3ee2e1f9244a9dea017a2d9796ffdbcf5d6b761e","modified":1537328416758},{"_id":"public/archives/index.html","hash":"3ee2e1f9244a9dea017a2d9796ffdbcf5d6b761e","modified":1537328416759},{"_id":"public/archives/2015/index.html","hash":"3ee2e1f9244a9dea017a2d9796ffdbcf5d6b761e","modified":1537328416759},{"_id":"public/index.html","hash":"3ee2e1f9244a9dea017a2d9796ffdbcf5d6b761e","modified":1537328416759},{"_id":"public/archives/2015/10/index.html","hash":"3ee2e1f9244a9dea017a2d9796ffdbcf5d6b761e","modified":1537328416759},{"_id":"public/tags/css/index.html","hash":"3ee2e1f9244a9dea017a2d9796ffdbcf5d6b761e","modified":1537328416759},{"_id":"public/api/tags/随笔.json","hash":"776c52c3d912b80b2f9bca6b62c3f25ee2327629","modified":1537328416759},{"_id":"public/api/articles/hexo.json","hash":"a81efe4200bfaae4a9e49597a4ff1b29c0b0feff","modified":1537328416759},{"_id":"public/api/articles/Christmas.json","hash":"ec9c48f416e6ada62bbc80bcc537123da38eeada","modified":1537328416759},{"_id":"public/2018/09/19/Christmas/index.html","hash":"3ee2e1f9244a9dea017a2d9796ffdbcf5d6b761e","modified":1537328416763},{"_id":"public/2018/09/19/hexo/index.html","hash":"3ee2e1f9244a9dea017a2d9796ffdbcf5d6b761e","modified":1537328416763},{"_id":"public/archives/2018/index.html","hash":"3ee2e1f9244a9dea017a2d9796ffdbcf5d6b761e","modified":1537328416763},{"_id":"public/archives/2018/09/index.html","hash":"3ee2e1f9244a9dea017a2d9796ffdbcf5d6b761e","modified":1537328416763},{"_id":"public/tags/随笔/index.html","hash":"3ee2e1f9244a9dea017a2d9796ffdbcf5d6b761e","modified":1537328416763},{"_id":"public/about/index.html","hash":"3f274bb36a278034e67e382025185046dcffce61","modified":1537328416772},{"_id":"public/static/images/header3.png","hash":"2be0081309f0c169b31c171045cd9cd8ebb7cd6b","modified":1537328416772},{"_id":"public/static/images/show-love.jpg","hash":"35e0abef60786a74e284700a6706055a94061a70","modified":1537328416807},{"_id":"source/CNAME.txt","hash":"29a5fd3adef89ba12ba0ad8ca5901f8ad80839af","modified":1537329072123},{"_id":"public/CNAME.txt","hash":"29a5fd3adef89ba12ba0ad8ca5901f8ad80839af","modified":1537329711880},{"_id":"source/CNAME","hash":"29a5fd3adef89ba12ba0ad8ca5901f8ad80839af","modified":1537329072123},{"_id":"public/CNAME","hash":"29a5fd3adef89ba12ba0ad8ca5901f8ad80839af","modified":1537329889432},{"_id":"source/README.md","hash":"72cbc581a1d980e1d1c5caaa97a556c1f27263db","modified":1537332508884},{"_id":"public/README.md","hash":"72cbc581a1d980e1d1c5caaa97a556c1f27263db","modified":1537332603275}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"辨析 Sass 中的 Map 和 List","date":"2015-10-21T02:34:12.000Z","_content":"\n如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。\n\n自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。\n\n那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 `package.json` 或者其他同类型的项目配置文件所控制，往往只需一条命令（`gem update sass`）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。\n\n<!-- more -->\n\n使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。\n\n## 测试表格\n\nVariable | Description\n--- | ---\n`site` | Sitewide information.\n`page` | Page specific information and custom variables set in front-matter.\n`config` | Site configuration\n`theme` | Theme configuration. Inherits from site configuration.\n`_` (single underscore) | [Lodash](http://lodash.com/) library\n`path` | Path of current page\n`url` | Full URL of current page\n`env` | Environment variables\n\n\n## 语法比较\n\n<div class=\"note\">\n    <h5>测试标题</h5>\n    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 `min-width`、`max-width`、`font-size` 和 `line-height` 四个样式。</p>\n</div>\n\n#### Map 语法\n\n下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。\n\n```sass\n$breakpoint-map: (\n    small: (\n        min-width: null,\n        max-width: 479px,\n        base-font: 16px,\n        vertical-rhythm: 1.3\n    ),\n    medium: (\n        min-width: 480px,\n        max-width: 959px,\n        base-font: 18px,\n        vertical-rhythm: 1.414\n    ),\n    large: (\n        min-width: 960px,\n        max-width: 1099px,\n        base-font: 18px,\n        vertical-rhythm: 1.5\n    ),\n    xlarge: (\n        min-width: 1100px,\n        max-width: null,\n        base-font: 21px,\n        vertical-rhythm: 1.618\n    )\n);\n```\n\n#### 多重列表语法\n\n下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 `nth()` 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, null, 21px, 1.618)\n);\n```\n\n## 遍历比较\n\n<div class=\"note info\">\n    <h5>测试标题</h5>\n    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p>\n</div>\n\n#### 遍历 Map\n\n我们可以使用如下的代码遍历 Map：\n\n```sass\n@each $label, $map in $breakpoint-map {}\n```\n\n这里的变量 `$label` 和 `$map` 会随着对 `$breakpoint-map` 的遍历被动态地赋值，`$label` 将会被赋值为 `$breakpoint-map` 的 Key，而 `$map` 会被赋值为 `$breakpoint-map` 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 `map-get()` 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。\n\n具体的做法就是使用 `@each` 遍历 Map，然后使用 `map-get()` 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：\n\n```sass\n@each $label, $map in $breakpoint-map {\n    $min-width: map-get($map, min-width);\n    $max-width: map-get($map, max-width);\n    $base-font: map-get($map, base-font);\n    $vertical-rhythm: map-get($map, vertical-rhythm);\n}\n```\n\n#### 遍历多重列表\n\n遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 `map-get()` 函数取特定值，直接遍历一遍即可获得特定值。\n\n因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 `map-get()`，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：\n\n```sass\n@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n}\n```\n\n## 慎用多重列表\n\n<div class=\"note warning\">\n    <h5>测试标题</h5>\n    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p>\n</div>\n\n#### 遗漏键值\n\n如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, 21px, 1.618)\n);\n\np {\n    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n        @if $min-width {\n            @include breakpoint( $min-width ) {\n                font-size: $base-font;\n                line-height: $vertical-rhythm;\n            }\n        } @else {\n            font-size: $base-font;\n            line-height: $vertical-rhythm;\n        }\n    }\n}\n```\n\n当我们尝试运行这段代码时，结果肯定是错误地，因为在 `$breakpoint-list` 的最后一行，`xlarge` 被赋值给了 `$label`，`1100px` 被赋值给了 `$min-width`，`21px` 被赋值给了 `$max-width`, `1.618` 被赋值给了 `$base-font`，最终导致 `$vertical-rhythm` 没有被赋值，结果就是 `font-size` 的属性值是错的，`line-height` 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。\n\n如果我们使用 Map 来代替这里的多重列表，那么使用 `map-get()` 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。\n\n#### 查找特定列表\n\n在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 `map-get()` 函数可以快速定位到特定子 Map：\n\n```sass\n$medium-map: map-get($maps, medium);\n```\n\n但如果要获取多种列表 `medium` 列表，麻烦可就大了：\n\n```sass\n@function get-list($label) {\n    @each $list in $breakpoint-list {\n        @if nth($list, 1) == $label {\n            @return $list;\n        }\n    }\n    @return null;\n}\n$medium-list: get-list(medium);\n```\n\n这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 `null`。这实际上就是手工实现了 `map-get()` 的逻辑。\n\n#### 缺少原生的 Map 函数\n\nSass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 `map-merge()` 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 `join()` 或 `append()` 来增加新列表，从而模拟出 `map-merge()` 的效果。\n\n另一个实用的 Map 函数就是 `map-has-key()`，对于依赖 `map-get()` 的自定义函数来说，`map-has-key()` 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。\n\n## 总结\n\n<div class=\"note unreleased\">\n    <h5>Test Title</h5>\n    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p>\n</div>\n\n虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。\n","source":"_posts/demo.md","raw":"title: 辨析 Sass 中的 Map 和 List\ndate: 2015-10-21 10:34:12\ntags:\n- css\n---\n\n如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。\n\n自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。\n\n那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 `package.json` 或者其他同类型的项目配置文件所控制，往往只需一条命令（`gem update sass`）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。\n\n<!-- more -->\n\n使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。\n\n## 测试表格\n\nVariable | Description\n--- | ---\n`site` | Sitewide information.\n`page` | Page specific information and custom variables set in front-matter.\n`config` | Site configuration\n`theme` | Theme configuration. Inherits from site configuration.\n`_` (single underscore) | [Lodash](http://lodash.com/) library\n`path` | Path of current page\n`url` | Full URL of current page\n`env` | Environment variables\n\n\n## 语法比较\n\n<div class=\"note\">\n    <h5>测试标题</h5>\n    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 `min-width`、`max-width`、`font-size` 和 `line-height` 四个样式。</p>\n</div>\n\n#### Map 语法\n\n下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。\n\n```sass\n$breakpoint-map: (\n    small: (\n        min-width: null,\n        max-width: 479px,\n        base-font: 16px,\n        vertical-rhythm: 1.3\n    ),\n    medium: (\n        min-width: 480px,\n        max-width: 959px,\n        base-font: 18px,\n        vertical-rhythm: 1.414\n    ),\n    large: (\n        min-width: 960px,\n        max-width: 1099px,\n        base-font: 18px,\n        vertical-rhythm: 1.5\n    ),\n    xlarge: (\n        min-width: 1100px,\n        max-width: null,\n        base-font: 21px,\n        vertical-rhythm: 1.618\n    )\n);\n```\n\n#### 多重列表语法\n\n下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 `nth()` 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, null, 21px, 1.618)\n);\n```\n\n## 遍历比较\n\n<div class=\"note info\">\n    <h5>测试标题</h5>\n    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p>\n</div>\n\n#### 遍历 Map\n\n我们可以使用如下的代码遍历 Map：\n\n```sass\n@each $label, $map in $breakpoint-map {}\n```\n\n这里的变量 `$label` 和 `$map` 会随着对 `$breakpoint-map` 的遍历被动态地赋值，`$label` 将会被赋值为 `$breakpoint-map` 的 Key，而 `$map` 会被赋值为 `$breakpoint-map` 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 `map-get()` 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。\n\n具体的做法就是使用 `@each` 遍历 Map，然后使用 `map-get()` 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：\n\n```sass\n@each $label, $map in $breakpoint-map {\n    $min-width: map-get($map, min-width);\n    $max-width: map-get($map, max-width);\n    $base-font: map-get($map, base-font);\n    $vertical-rhythm: map-get($map, vertical-rhythm);\n}\n```\n\n#### 遍历多重列表\n\n遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 `map-get()` 函数取特定值，直接遍历一遍即可获得特定值。\n\n因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 `map-get()`，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：\n\n```sass\n@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n}\n```\n\n## 慎用多重列表\n\n<div class=\"note warning\">\n    <h5>测试标题</h5>\n    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p>\n</div>\n\n#### 遗漏键值\n\n如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：\n\n```sass\n$breakpoint-list: (\n    (small, null, 479px, 16px, 1.3),\n    (medium, 480px, 959px, 18px, 1.414),\n    (large, 960px, 1099px, 18px, 1.5),\n    (xlarge, 1100px, 21px, 1.618)\n);\n\np {\n    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {\n        @if $min-width {\n            @include breakpoint( $min-width ) {\n                font-size: $base-font;\n                line-height: $vertical-rhythm;\n            }\n        } @else {\n            font-size: $base-font;\n            line-height: $vertical-rhythm;\n        }\n    }\n}\n```\n\n当我们尝试运行这段代码时，结果肯定是错误地，因为在 `$breakpoint-list` 的最后一行，`xlarge` 被赋值给了 `$label`，`1100px` 被赋值给了 `$min-width`，`21px` 被赋值给了 `$max-width`, `1.618` 被赋值给了 `$base-font`，最终导致 `$vertical-rhythm` 没有被赋值，结果就是 `font-size` 的属性值是错的，`line-height` 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。\n\n如果我们使用 Map 来代替这里的多重列表，那么使用 `map-get()` 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。\n\n#### 查找特定列表\n\n在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 `map-get()` 函数可以快速定位到特定子 Map：\n\n```sass\n$medium-map: map-get($maps, medium);\n```\n\n但如果要获取多种列表 `medium` 列表，麻烦可就大了：\n\n```sass\n@function get-list($label) {\n    @each $list in $breakpoint-list {\n        @if nth($list, 1) == $label {\n            @return $list;\n        }\n    }\n    @return null;\n}\n$medium-list: get-list(medium);\n```\n\n这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 `null`。这实际上就是手工实现了 `map-get()` 的逻辑。\n\n#### 缺少原生的 Map 函数\n\nSass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 `map-merge()` 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 `join()` 或 `append()` 来增加新列表，从而模拟出 `map-merge()` 的效果。\n\n另一个实用的 Map 函数就是 `map-has-key()`，对于依赖 `map-get()` 的自定义函数来说，`map-has-key()` 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。\n\n## 总结\n\n<div class=\"note unreleased\">\n    <h5>Test Title</h5>\n    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p>\n</div>\n\n虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。\n","slug":"demo","published":1,"updated":"2018-09-19T00:55:59.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm8kz6r10004mcerdtibyuxe","content":"<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p>\n<p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p>\n<p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p>\n<a id=\"more\"></a>\n<p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p>\n<h2 id=\"测试表格\"><a href=\"#测试表格\" class=\"headerlink\" title=\"测试表格\"></a>测试表格</h2><table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>site</code></td>\n<td>Sitewide information.</td>\n</tr>\n<tr>\n<td><code>page</code></td>\n<td>Page specific information and custom variables set in front-matter.</td>\n</tr>\n<tr>\n<td><code>config</code></td>\n<td>Site configuration</td>\n</tr>\n<tr>\n<td><code>theme</code></td>\n<td>Theme configuration. Inherits from site configuration.</td>\n</tr>\n<tr>\n<td><code>_</code> (single underscore)</td>\n<td><a href=\"http://lodash.com/\" target=\"_blank\" rel=\"noopener\">Lodash</a> library</td>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td>Path of current page</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>Full URL of current page</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>Environment variables</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"语法比较\"><a href=\"#语法比较\" class=\"headerlink\" title=\"语法比较\"></a>语法比较</h2><div class=\"note\"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div>\n\n<h4 id=\"Map-语法\"><a href=\"#Map-语法\" class=\"headerlink\" title=\"Map 语法\"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$breakpoint-map: (</span><br><span class=\"line\">    small: (</span><br><span class=\"line\">        min-width: null,</span><br><span class=\"line\">        max-width: 479px,</span><br><span class=\"line\">        base-font: 16px,</span><br><span class=\"line\">        vertical-rhythm: 1.3</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    medium: (</span><br><span class=\"line\">        min-width: 480px,</span><br><span class=\"line\">        max-width: 959px,</span><br><span class=\"line\">        base-font: 18px,</span><br><span class=\"line\">        vertical-rhythm: 1.414</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    large: (</span><br><span class=\"line\">        min-width: 960px,</span><br><span class=\"line\">        max-width: 1099px,</span><br><span class=\"line\">        base-font: 18px,</span><br><span class=\"line\">        vertical-rhythm: 1.5</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    xlarge: (</span><br><span class=\"line\">        min-width: 1100px,</span><br><span class=\"line\">        max-width: null,</span><br><span class=\"line\">        base-font: 21px,</span><br><span class=\"line\">        vertical-rhythm: 1.618</span><br><span class=\"line\">    )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"多重列表语法\"><a href=\"#多重列表语法\" class=\"headerlink\" title=\"多重列表语法\"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$breakpoint-list: (</span><br><span class=\"line\">    (small, null, 479px, 16px, 1.3),</span><br><span class=\"line\">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class=\"line\">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class=\"line\">    (xlarge, 1100px, null, 21px, 1.618)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"遍历比较\"><a href=\"#遍历比较\" class=\"headerlink\" title=\"遍历比较\"></a>遍历比较</h2><div class=\"note info\"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div>\n\n<h4 id=\"遍历-Map\"><a href=\"#遍历-Map\" class=\"headerlink\" title=\"遍历 Map\"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@each $label, $map in $breakpoint-map &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p>\n<p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@each $label, $map in $breakpoint-map &#123;</span><br><span class=\"line\">    $min-width: map-get($map, min-width);</span><br><span class=\"line\">    $max-width: map-get($map, max-width);</span><br><span class=\"line\">    $base-font: map-get($map, base-font);</span><br><span class=\"line\">    $vertical-rhythm: map-get($map, vertical-rhythm);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"遍历多重列表\"><a href=\"#遍历多重列表\" class=\"headerlink\" title=\"遍历多重列表\"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p>\n<p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"慎用多重列表\"><a href=\"#慎用多重列表\" class=\"headerlink\" title=\"慎用多重列表\"></a>慎用多重列表</h2><div class=\"note warning\"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div>\n\n<h4 id=\"遗漏键值\"><a href=\"#遗漏键值\" class=\"headerlink\" title=\"遗漏键值\"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$breakpoint-list: (</span><br><span class=\"line\">    (small, null, 479px, 16px, 1.3),</span><br><span class=\"line\">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class=\"line\">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class=\"line\">    (xlarge, 1100px, 21px, 1.618)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class=\"line\">        @if $min-width &#123;</span><br><span class=\"line\">            @include breakpoint( $min-width ) &#123;</span><br><span class=\"line\">                font-size: $base-font;</span><br><span class=\"line\">                line-height: $vertical-rhythm;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; @else &#123;</span><br><span class=\"line\">            font-size: $base-font;</span><br><span class=\"line\">            line-height: $vertical-rhythm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p>\n<p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p>\n<h4 id=\"查找特定列表\"><a href=\"#查找特定列表\" class=\"headerlink\" title=\"查找特定列表\"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$medium-map: map-get($maps, medium);</span><br></pre></td></tr></table></figure>\n<p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@function get-list($label) &#123;</span><br><span class=\"line\">    @each $list in $breakpoint-list &#123;</span><br><span class=\"line\">        @if nth($list, 1) == $label &#123;</span><br><span class=\"line\">            @return $list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$medium-list: get-list(medium);</span><br></pre></td></tr></table></figure>\n<p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p>\n<h4 id=\"缺少原生的-Map-函数\"><a href=\"#缺少原生的-Map-函数\" class=\"headerlink\" title=\"缺少原生的 Map 函数\"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p>\n<p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><div class=\"note unreleased\"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div>\n\n<p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>\n","site":{"data":{}},"excerpt":"<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p>\n<p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p>\n<p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p>","more":"<p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p>\n<h2 id=\"测试表格\"><a href=\"#测试表格\" class=\"headerlink\" title=\"测试表格\"></a>测试表格</h2><table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>site</code></td>\n<td>Sitewide information.</td>\n</tr>\n<tr>\n<td><code>page</code></td>\n<td>Page specific information and custom variables set in front-matter.</td>\n</tr>\n<tr>\n<td><code>config</code></td>\n<td>Site configuration</td>\n</tr>\n<tr>\n<td><code>theme</code></td>\n<td>Theme configuration. Inherits from site configuration.</td>\n</tr>\n<tr>\n<td><code>_</code> (single underscore)</td>\n<td><a href=\"http://lodash.com/\" target=\"_blank\" rel=\"noopener\">Lodash</a> library</td>\n</tr>\n<tr>\n<td><code>path</code></td>\n<td>Path of current page</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>Full URL of current page</td>\n</tr>\n<tr>\n<td><code>env</code></td>\n<td>Environment variables</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"语法比较\"><a href=\"#语法比较\" class=\"headerlink\" title=\"语法比较\"></a>语法比较</h2><div class=\"note\"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div>\n\n<h4 id=\"Map-语法\"><a href=\"#Map-语法\" class=\"headerlink\" title=\"Map 语法\"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$breakpoint-map: (</span><br><span class=\"line\">    small: (</span><br><span class=\"line\">        min-width: null,</span><br><span class=\"line\">        max-width: 479px,</span><br><span class=\"line\">        base-font: 16px,</span><br><span class=\"line\">        vertical-rhythm: 1.3</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    medium: (</span><br><span class=\"line\">        min-width: 480px,</span><br><span class=\"line\">        max-width: 959px,</span><br><span class=\"line\">        base-font: 18px,</span><br><span class=\"line\">        vertical-rhythm: 1.414</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    large: (</span><br><span class=\"line\">        min-width: 960px,</span><br><span class=\"line\">        max-width: 1099px,</span><br><span class=\"line\">        base-font: 18px,</span><br><span class=\"line\">        vertical-rhythm: 1.5</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    xlarge: (</span><br><span class=\"line\">        min-width: 1100px,</span><br><span class=\"line\">        max-width: null,</span><br><span class=\"line\">        base-font: 21px,</span><br><span class=\"line\">        vertical-rhythm: 1.618</span><br><span class=\"line\">    )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"多重列表语法\"><a href=\"#多重列表语法\" class=\"headerlink\" title=\"多重列表语法\"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$breakpoint-list: (</span><br><span class=\"line\">    (small, null, 479px, 16px, 1.3),</span><br><span class=\"line\">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class=\"line\">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class=\"line\">    (xlarge, 1100px, null, 21px, 1.618)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"遍历比较\"><a href=\"#遍历比较\" class=\"headerlink\" title=\"遍历比较\"></a>遍历比较</h2><div class=\"note info\"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div>\n\n<h4 id=\"遍历-Map\"><a href=\"#遍历-Map\" class=\"headerlink\" title=\"遍历 Map\"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@each $label, $map in $breakpoint-map &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p>\n<p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@each $label, $map in $breakpoint-map &#123;</span><br><span class=\"line\">    $min-width: map-get($map, min-width);</span><br><span class=\"line\">    $max-width: map-get($map, max-width);</span><br><span class=\"line\">    $base-font: map-get($map, base-font);</span><br><span class=\"line\">    $vertical-rhythm: map-get($map, vertical-rhythm);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"遍历多重列表\"><a href=\"#遍历多重列表\" class=\"headerlink\" title=\"遍历多重列表\"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p>\n<p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"慎用多重列表\"><a href=\"#慎用多重列表\" class=\"headerlink\" title=\"慎用多重列表\"></a>慎用多重列表</h2><div class=\"note warning\"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div>\n\n<h4 id=\"遗漏键值\"><a href=\"#遗漏键值\" class=\"headerlink\" title=\"遗漏键值\"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$breakpoint-list: (</span><br><span class=\"line\">    (small, null, 479px, 16px, 1.3),</span><br><span class=\"line\">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class=\"line\">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class=\"line\">    (xlarge, 1100px, 21px, 1.618)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">p &#123;</span><br><span class=\"line\">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class=\"line\">        @if $min-width &#123;</span><br><span class=\"line\">            @include breakpoint( $min-width ) &#123;</span><br><span class=\"line\">                font-size: $base-font;</span><br><span class=\"line\">                line-height: $vertical-rhythm;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; @else &#123;</span><br><span class=\"line\">            font-size: $base-font;</span><br><span class=\"line\">            line-height: $vertical-rhythm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p>\n<p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p>\n<h4 id=\"查找特定列表\"><a href=\"#查找特定列表\" class=\"headerlink\" title=\"查找特定列表\"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$medium-map: map-get($maps, medium);</span><br></pre></td></tr></table></figure>\n<p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@function get-list($label) &#123;</span><br><span class=\"line\">    @each $list in $breakpoint-list &#123;</span><br><span class=\"line\">        @if nth($list, 1) == $label &#123;</span><br><span class=\"line\">            @return $list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$medium-list: get-list(medium);</span><br></pre></td></tr></table></figure>\n<p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p>\n<h4 id=\"缺少原生的-Map-函数\"><a href=\"#缺少原生的-Map-函数\" class=\"headerlink\" title=\"缺少原生的 Map 函数\"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p>\n<p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><div class=\"note unreleased\"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div>\n\n<p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjm8kz6r10004mcerdtibyuxe","tag_id":"cjm8kz6r20005mcer51hyzu0j","_id":"cjm8kz6r30006mcerhwcqwkr1"}],"Tag":[{"name":"随笔","_id":"cjm8kz6qp0002mcerx9btjanu"},{"name":"css","_id":"cjm8kz6r20005mcer51hyzu0j"}]}}